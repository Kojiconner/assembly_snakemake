#!/usr/bin/env python3
# -*- coding: utf-8

import sys
import argparse
import subprocess
import csv
import os

#  TODO: creating framework to adjust time (and resources) for subiterative assembly (here)
# http://bluegenes.github.io/Using-Snakemake_Profiles/


"""what do I have and where I am going. 

I have a pipeline that works on a single sample. it takes a fastq file as input and creates all the specified subdirs and files
within a given dir.

What do I want: two fold objectives: I want to create a pipeline that is generalizable to all samples or a dataset. I would leverage 
argparse to do this and let argparse create a specified config file that snakemake ultimately uses. (implement argparse, create
config file from given data, update snakemake to work with config file) (Use dry run!)

The other objective is to create a pipeline that does subassemblies and iterative subtractive assemblies. I believe this can be 
accomplished with two new rules. One rule will be subsetting reads. another rule will be mapping reads. perhaps another rule
will be subsetting only unmapped reads.

: set up argparse (done)
: config file (done)
: make config file hold resource req for each rule (testing)
    check config file is writen correctly
        make sample data/files (done)

        cmds
            conda activate snakemake
            full_assembly -i /Users/connerkojima/thrash/assembly_snakemake/test_data/samples/ -s _all.fastq -o /Users/connerkojima/thrash/assembly_snakemake/test_data/output_dir/ --resource-req /Users/connerkojima/thrash/assembly_snakemake/job_resources.yml -n --sub 1,5,10,20,50
            full_assembly -i /Users/connerkojima/thrash/assembly_snakemake/test_data/samples/samples.csv -o /Users/connerkojima/thrash/assembly_snakemake/test_data/output_dir/ --resource-req /Users/connerkojima/thrash/assembly_snakemake/job_resources.yml -n --sub 1,5,10,20,50
            full_assembly -i /Users/connerkojima/thrash/assembly_snakemake/test_data/samples/samples.csv -o /Users/connerkojima/thrash/assembly_snakemake/test_data/output_dir/ --resource-req /Users/connerkojima/thrash/assembly_snakemake/job_resources.yml -n --sub 10,20 --subiter 15,50

: sub assemblies (done)
    : subsetting rule: (done)
    : mapping rule: (done)
: subiterative subassemblies (flow) (Done)
: subsetting rules: (done) (done)
    : creating framework to adjust time (and resources) for subiterative assembly (here)

Done: make an 100% assembly only rule
    Done: Make seperate subassembly and subtractive iterative assembly command line args
    Done: make config file update according to subassembly and subtractive iterative assembly
    Done: have rules in snakefile all change acccording to config file

execute command in discovery hpc: for thrash metaGs
/project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/bin/full_assembly -i /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/test_data/samples/EAGER_actual_all.csv -o /project/thrash_89/db/EAGER_metaG_for_ck/pipeline_assemblies/ --resource-req /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/job_resources.yml --dag "dag_all_samples_just_full.pdf"
/project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/bin/full_assembly -i /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/test_data/samples/EAGER_actual.csv -o /project/thrash_89/db/EAGER_metaG_for_ck/pipeline_assemblies/ --resource-req /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/job_resources.yml --sub 1,5,10,20,50 --subiter 1,5,10,20,50,100 --dag "dag_all_samples_all.pdf"
/project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/bin/full_assembly -i /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/test_data/samples/EAGER_actual.csv -o /project/thrash_89/db/EAGER_metaG_for_ck/pipeline_assemblies/ --resource-req /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/job_resources.yml -n
/project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/bin/full_assembly -i /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/test_data/samples/EAGER_actual.csv -o /project/thrash_89/db/EAGER_metaG_for_ck/pipeline_assemblies/ --resource-req /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/job_resources.yml --additional-args="--rerun-incomplete --rerun-triggers mtime"
/project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/bin/full_assembly -i /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/test_data/samples/EAGER_actual.csv -o /project/thrash_89/db/EAGER_metaG_for_ck/pipeline_assemblies/ --resource-req /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/job_resources.yml --additional-args="--rerun-incomplete --rerun-triggers mtime -n"
full_assembly -i /Users/connerkojima/thrash/assembly_snakemake/test_data/samples/ -s _all.fastq -o /Users/connerkojima/thrash/assembly_snakemake/test_data/output_dir/ --resource-req /Users/connerkojima/thrash/assembly_snakemake/job_resources2.yml --dag "dag_test.pdf" --sub 1

test command on fake file (dry run only)
/project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/bin/full_assembly -i /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/test_data/samples/samples2.csv -o /project/thrash_89/db/EAGER_metaG_for_ck/pipeline_assemblies/ --resource-req /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/job_resources.yml -n


# Command to rerun in v4 (Nov 6, 2022)
Done: /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/bin/full_assembly -i /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/test_data/samples/EAGER_actual2.csv -o /project/thrash_89/db/EAGER_metaG_for_ck/pipeline_assemblies/ --resource-req /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/job_resources.yml --no-full --sub 5 --additional-args="--rerun-incomplete --rerun-triggers mtime -n"

# command to run after 100 (Nov 10, 2022)
Done: /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/bin/full_assembly -i /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/test_data/samples/EAGER_actual2.csv -o /project/thrash_89/db/EAGER_metaG_for_ck/pipeline_assemblies/ --resource-req /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/job_resources.yml --no-full --sub 10 --additional-args="--rerun-incomplete --rerun-triggers mtime -n"

test command locally
full_assembly -i /Users/connerkojima/thrash/assembly_snakemake/test_data/samples/ -s _all.fastq -o /Users/connerkojima/thrash/assembly_snakemake/test_data/output_dir/ --resource-req /Users/connerkojima/thrash/assembly_snakemake/job_resources.yml -n --sub 1 --no-full

test command local full, sub, subiter on one file
full_assembly -i /Users/connerkojima/thrash/assembly_snakemake/test_data/samples/samples.csv -o /Users/connerkojima/thrash/assembly_snakemake/test_data/output_dir/ --resource-req /Users/connerkojima/thrash/assembly_snakemake/job_resources.yml --sub 1,5,10,20,50 --subiter 1,5,10,20,50,100 --dag "dag_one_sample_all_approaches.pdf"

TODO: add Tbon_V2_S22 and LKB_V7_S19 back to list
Done: make slurm resource config from assembly show up in snakemake config

TODO: Make resource params adjust according to [par, ser] and [percentage_reads]

#test subassebmly 1command on hpc
/project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/bin/full_assembly -i /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/test_data/samples/EAGER_actual2.csv -o /project/thrash_89/db/EAGER_metaG_for_ck/pipeline_assemblies/ --resource-req /project/thrash_89/db/EAGER_metaG_for_ck/scripts/assembly_snakemake/job_resources.yml --no-full --sub 5 --additional-args="-n"

Focus in on one sample 
Make config file hold resource values to use e.g. 

Subset 
1: params for each rule
10: params for each rule
15: params for each rule
25: params for each rule
50: params for each rule
100: params for each rule

Have snakemake access these values for the rule by looking at percent wildcard (would have to use some sort of function)

Would need to adjust full_assembly file to account for additional optionally in command line

Worst case scenario.
Do top level control of snakemake. Run snakemake on each iteration file and rewrite resource params for each iteration

TODO: testing subassembly:
TODO: testing subiterative subassembly:

afterthought: job groups
"""

def main():
    args = add_arguments()

    ref_args = preprocess_arguments(args)
    samples, filenames, resources = ref_args['samples'], ref_args['filenames'], ref_args['slurm']
    snakefile_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "snakefile")
    profile_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../.config/slurm/")
    config_filename = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../config_generated.yaml')
    
    full = "True"
    if args.no_full:
        full = "False"
    
    if args.sub and args.subiter:
        create_config_file(full, config_filename, args, samples, filenames, resources, subper=ref_args['sub'], subiterper=ref_args['subiter'], threshold=ref_args['threshold'])
    elif args.sub:
        create_config_file(full, config_filename, args, samples, filenames, resources, subper=ref_args['sub'], subiterper=False, threshold=80)
    elif args.subiter:
        create_config_file(full, config_filename, args, samples, filenames, resources, subper=False, subiterper=ref_args['subiter'], threshold=ref_args['threshold'])
    else:
        create_config_file(full, config_filename, args, samples, filenames, resources, subper=False, subiterper=False, threshold=80)
    dry_run_addon = ""
    if args.n:
        dry_run_addon = "-n"
    # subprocess and call snakemake with temp config file   --dag | dot -Tpdf > dag_all_07.pdf
    print(profile_path)
    if args.n:
        subprocess.run("snakemake -s {0} --profile {1} {2} --configfile {3} -n".format(snakefile_path, profile_path, dry_run_addon, config_filename), shell=True)
    elif args.dag:
        subprocess.run("snakemake -s {0} --profile {1} {2} --configfile {3} --dag | dot -Tpdf > {4}".format(snakefile_path, profile_path, dry_run_addon, config_filename, args.dag), shell=True)
    else:
        if args.opt:
            subprocess.run("snakemake -s {0} --profile {1} {2} --configfile {3} {4}".format(snakefile_path, profile_path, dry_run_addon, config_filename, args.opt), shell=True)
        else:
            subprocess.run("snakemake -s {0} --profile {1} {2} --configfile {3}".format(snakefile_path, profile_path, dry_run_addon, config_filename), shell=True)

def add_arguments():
    p = argparse.ArgumentParser(prog="Assembly workflow", description="Run Streamlined Assembly Protocols")
    p.add_argument('-i', help='Path to input interleaved fastq files. If path is a dir with fastq files, the -s flag should be used \n'
                   'i.e. "_all.fastq" for "<sample>_all.fastq". Another option is to indicate a csv file. The csv file should contain \n'
                   'sample names in the first column and paths to interleaved sample fastq files in the second column. ', required=True)
    p.add_argument('-s', help='suffix for interleaved fastq files i.e. "_all.fastq" for "<sample>_all.fastq"', required=False)
    p.add_argument('-o', help="path to output dir. If output dir does not exist, it will be created", required=True)
    p.add_argument('--resource-req', help='path to yaml file that stores the resource requirements if using slurm', required = False, dest='slurm_config')
    p.add_argument('-n', help='dry run through snakemake workflow', default=False, action='store_true')
    p.add_argument('--additional-args', help='insert additional snakemake args e.g. "-n" NOTE: insert args with equal sign \n'
                   '--additional-args="--rerun-incomplete"', default=False, type=str, required=False, dest="opt", action="store")
    p.add_argument('--dag', help='create DAG pdf. Enter path to output dag.pdf', default=False, type=str, required=False)
    p.add_argument('--sub', help='percentage of reads to keep for subassemblies. Enter as comma delimited list of percentages \n'
                   'e.g. 5,10,25,50', type=str, required=False)
    p.add_argument('--subiter', help='percentage of reads to keep for subtractive iterative assemblies. Enter as comma delimited list of percentages \n'
                   'e.g. 5,10,25,50', type=str, required=False)
    p.add_argument('--threshold', help='treshold completeness for bins in subiterative assembly to be excluded from subsequent iteration. \n'
                   'default: 80', type=str, required=False)
    p.add_argument('--no-full', help='do not assemble and bin for 100 percent of the reads', default=False, action='store_true', dest='no_full')

    #TODO: add additional options to specify subassemblies and iterative subtractive assembly

    return p.parse_args()

def preprocess_arguments(args):

    ref_args = {}

    if args.sub:
        # make sure that list of subassembly percentages if provided are appropriate
        # check if input is valid
        sub_per = args.sub.split(',')
        sub_per = [int(a) for a in sub_per]

        # check if "a" is in proper range.
        if len(set(sub_per) - set(range(1, 99))) > 0: # can use also min(a)>=1 and max(a)<=50
            raise Exception("subassembly percentages are not in range [1,99]")
        
        ref_args['sub'] = sub_per
    if args.subiter:
        # make sure that list of subassembly percentages if provided are appropriate
        # check if input is valid
        sub_per = args.subiter.split(',')
        sub_per = [int(a) for a in sub_per]

        # check if "a" is in proper range.
        if len(set(sub_per) - set(range(1, 101))) > 0: # can use also min(a)>=1 and max(a)<=50
            raise Exception("iterative subtractive assembly percentages are not in range [1,100]")
        print(sub_per)
        ref_args['subiter'] = sub_per

        if args.threshold: 
            ref_args['threshold'] = args.threshold
        else: 
            ref_args['threshold'] = "80"

    # make sure -i flag points to dir or csv file. make sure that suffix flag is indicated if -i points to a dir

    if args.slurm_config:
        with open(args.slurm_config, 'r') as f:
            lines = f.readlines()
            lines = ["      {0}".format(line) for line in lines]
            resources_str = "".join(lines)
        ref_args['slurm'] = resources_str
    
    if os.path.isdir(args.i):
        if not args.s:
            raise IOError("suffix must be supplied if input flag points to a directory")
        else:
            # get list of fastq files
            filenames = os.listdir(args.i)
            filenames = [name for name in filenames if args.s in name]
            samples = [sample.partition(args.s)[0] for sample in filenames]
            filenames = [os.path.join(args.i, name) for name in filenames]

            ref_args['samples'], ref_args['filenames'] = samples, filenames
    else:
        if args.s:
            raise IOError("suffix is supplied but input flag points to a file")
        else:
            # get list of fastq files
            samples, filenames = [], []
            with open(args.i, newline='') as csvfile:
                input_reader = csv.reader(csvfile, delimiter=',')
                for row in input_reader:
                    samples.append(row[0])
                    filenames.append(row[1])
            ref_args['samples'], ref_args['filenames'] = samples, filenames
        
    return ref_args
        

def create_config_file(full, filename, args, samples, filenames, resources, subper=False, subiterper=False, threshold=80):

    pairs = []
    for i in range(len(samples)):
        pairs.append("{0}: {1}".format(samples[i], filenames[i]))

    subper_str = ""
    if subper:
        subper_str = "subassembly_percentages:"
        for per in subper:
            subper_str = subper_str + "\n      - " + str(per)
    else:
        subper_str = "subassembly_percentages: none"
    
    subiterper_str = ""
    if subiterper:
        subiterper_str = "subiterassembly_percentages:"
        for iterper in subiterper:
            subiterper_str = subiterper_str + "\n      - " + str(iterper)
        if threshold:
            subiterper_str = subiterper_str + "\n    threshold: " + threshold
            
    else:
        subiterper_str = "subiterassembly_percentages: none" + "\n    threshold: " + threshold

    # string to write to config file
    yml_lines = """
    full: {0}
    input:
      {1}
    output:
      output_dir: {2}
    {3}
    {4}
    slurm_resources: 
{5}
    """.format(full, "\n      ".join(pairs), args.o, subper_str, subiterper_str, resources)

    with open(filename, 'w') as f:
        f.writelines(yml_lines)


if __name__ == '__main__':
    main()